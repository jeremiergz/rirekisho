{"version":3,"sources":["webpack:///./src/components/SEO/index.tsx","webpack:///./src/pages/404.tsx"],"names":["SEO","description","keywords","lang","path","title","Gatsby","banner","site","siteMetadata","siteDescription","siteKeywords","siteUrl","siteTitle","twitterUsername","metaDescription","metaImageURL","childImageSharp","fixed","src","metaKeywords","metaURL","fullTitle","htmlAttributes","titleTemplate","rel","href","name","content","join","property","displayName","NotFoundPage","useEffect","navigate"],"mappings":"6FAAA,iDAIMA,EAA0B,SAAC,GAA+E,QAA7EC,mBAA6E,MAA/D,GAA+D,MAA3DC,gBAA2D,MAAhD,GAAgD,MAA5CC,YAA4C,MAArC,KAAqC,MAA/BC,YAA+B,MAAxB,IAAwB,MAAnBC,aAAmB,MAAX,KAAW,IAY1GC,iBAAA,cAVFC,EAF4G,EAE5GA,OAF4G,IAG5GC,KACEC,aACeC,EAL2F,EAKxGT,YACUU,EAN8F,EAMxGT,SACAU,EAPwG,EAOxGA,QACOC,EARiG,EAQxGR,MACAS,EATwG,EASxGA,gBAuBAC,EAAkBd,GAAeS,EACjCM,EAAe,GAAGJ,EAAUL,EAAOU,gBAAgBC,MAAMC,IACzDC,EAAelB,GAAYS,EAC3BU,EAAU,GAAGT,EAAUR,EACvBkB,EAAejB,EAAN,MAAiBQ,EAChC,OACE,kBAAC,SAAD,CAAQU,eAAgB,CAAEpB,QAAQE,MAAOA,EAAOmB,cAAa,QAAUX,GACrE,0BAAMY,IAAI,YAAYC,KAAML,IAC5B,0BAAMM,KAAK,cAAcC,QAASb,IAClC,0BAAMY,KAAK,QAAQC,QAASZ,IAC5B,0BAAMW,KAAK,WAAWC,QAASR,EAAaS,KAAK,QACjD,0BAAMC,SAAS,iBAAiBF,QAASb,IACzC,0BAAMe,SAAS,WAAWF,QAASZ,IACnC,0BAAMc,SAAS,WAAWF,QAASN,IACnC,0BAAMQ,SAAS,UAAUF,QAAQ,YACjC,0BAAME,SAAS,SAASF,QAASP,IACjC,0BAAMM,KAAK,eAAeC,QAAQ,wBAClC,0BAAMD,KAAK,kBAAkBC,QAASd,IACtC,0BAAMa,KAAK,sBAAsBC,QAASb,IAC1C,0BAAMY,KAAK,gBAAgBC,QAASZ,IACpC,0BAAMW,KAAK,gBAAgBC,QAASN,MAK1CtB,EAAI+B,YAAc,MASH/B,O,oCCtEf,wDAIMgC,EAAyB,WAI7B,OAHAC,qBAAU,WACRC,mBAAS,OACR,IACI,kBAAC,IAAD,CAAK9B,KAAK,OAAOC,MAAM,mBAGhC2B,EAAaD,YAAc,eAEZC","file":"component---src-pages-404-tsx-c88000bf7bce347e3d7d.js","sourcesContent":["import * as Gatsby from 'gatsby';\nimport React from 'react';\nimport { Helmet } from 'react-helmet-async';\n\nconst SEO: React.FC<SEOProps> = ({ description = '', keywords = [], lang = 'en', path = '/', title = 'CV' }) => {\n  const {\n    banner,\n    site: {\n      siteMetadata: {\n        description: siteDescription,\n        keywords: siteKeywords,\n        siteUrl,\n        title: siteTitle,\n        twitterUsername,\n      },\n    },\n  } = Gatsby.useStaticQuery<GraphQL.SEOData>(Gatsby.graphql`\n    query SEOData {\n      banner: file(relativePath: { eq: \"cover.png\" }) {\n        childImageSharp {\n          fixed(height: 630, width: 1200, pngQuality: 100) {\n            src\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          description\n          keywords\n          siteUrl\n          title\n          twitterUsername\n        }\n      }\n    }\n  `);\n  const metaDescription = description || siteDescription;\n  const metaImageURL = `${siteUrl}${banner.childImageSharp.fixed.src}`;\n  const metaKeywords = keywords || siteKeywords;\n  const metaURL = `${siteUrl}${path}`;\n  const fullTitle = `${title} | ${siteTitle}`;\n  return (\n    <Helmet htmlAttributes={{ lang }} title={title} titleTemplate={`%s | ${siteTitle}`}>\n      <link rel=\"canonical\" href={metaURL} />\n      <meta name=\"description\" content={metaDescription} />\n      <meta name=\"image\" content={metaImageURL} />\n      <meta name=\"keywords\" content={metaKeywords.join(', ')} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:image\" content={metaImageURL} />\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={metaURL} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={twitterUsername} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      <meta name=\"twitter:image\" content={metaImageURL} />\n      <meta name=\"twitter:title\" content={fullTitle} />\n    </Helmet>\n  );\n};\n\nSEO.displayName = 'SEO';\n\nexport type SEOProps = {\n  description?: string;\n  keywords?: string[];\n  lang?: string;\n  path?: string;\n  title?: string;\n};\nexport default SEO;\n","import SEO from 'components/SEO';\nimport { navigate } from 'gatsby';\nimport React, { useEffect } from 'react';\n\nconst NotFoundPage: React.FC = () => {\n  useEffect(() => {\n    navigate('/');\n  }, []);\n  return <SEO path=\"/404\" title=\"404 Not Found\" />;\n};\n\nNotFoundPage.displayName = 'NotFoundPage';\n\nexport default NotFoundPage;\n"],"sourceRoot":""}